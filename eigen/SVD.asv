function A = SVD( A )
%SVD Summary of this function goes here
%   Detailed explanation goes here

A = BidiagonalReduction( A );
q = 0;
Bd = diag(A);
Bs = diag(A, 1)';
n = length(Bd);

Bnorm = max(abs(Bd) + [abs(Bs) 0]);
tol = epsilon * Bnrom;

while 1
    for ii = 1 : n - 1
        if(abs(Bs(ii)) < epsilon * (abs(Bd(ii)) + abs(Bd(ii+1))))
            Bs(ii) = 0;
        end
    end
    for ii = 1 : n
        if(abs(Bd(ii)) < tol)
            Bd(ii) = 0;
            if(ii < n)
                Bs(ii) = 0;
            end
        end
    end
    for jj = n : -1 : 1
        if(jj > 1)
            if(Bs(jj-1)~=0)
                break;
            end
        end
    end
    if(jj == 1)
        break;
    end
    
    for ii = jj-1 : -1 : 1
        if(Bs(ii-1) == 0)
                break;
            end
    end
    
    
    
end


c = Bs(n-1)^2 + Bd(n)^2;
a = Bs(n-2)^2 + Bd(n-1)^2;
b = Bs(n-1)*Bd(n-1);
if(a > c)
    mu = (a+ c - sqrt((a-c)^2+4*b^2)) / 2;
else
    mu = (a+ c + sqrt((a-c)^2+4*b^2)) / 2;
end

y = Bd(1)^2 - mu;
z = Bd(1)*Bs(1);

for k = 1 : n-1
    if(z ~= 0)
        t = sqrt(abs(y)^2 + abs(z)^2);
        c = y/t;
        s = -z/t;
        tmp = Bd(k);
        Bd(k) = c * Bd(k) - s * Bs(k);
        Bs(k) = s * tmp + c * Bs(k);
        if(k > 1)
            Bs(k-1) = Bs(k-1) * c - s * z;
        end
        z = - Bd(k+1) * s;
        y = Bd(k);
        Bd(k+1) = c * Bd(k+1);
        
        if(z~=0)
            t = sqrt(abs(y)^2 + abs(z)^2);
            c = y/t;
            s = -z/t;
            Bd(k) = c * Bd(k) - s * z;
            tmp = Bs(k);
            Bs(k) = c * Bs(k) - s * Bd(k+1);
            Bd(k+1) = s * tmp + c * Bd(k+1);
            if k < n - 1
                y = Bs(k);
                z = -s * Bs(k+1);
                Bs(k+1) = c * Bs(k+1);
            end
        end
    end
end

A = diag(Bd) + diag(Bs, 1);
        

